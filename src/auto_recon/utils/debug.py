#!/usr/bin/env python3

from . import config, file, general

import os, typing

class Debug:

	__DEBUG_FILENAME = "debug.log"
	__FILTER_FILENAME = "filter.log"
	__ERROR_FILENAME = "error.log"

	__DEBUG_KEY = "DEBUG"
	__FILTER_KEY = "FILTER"
	__ERROR_KEY = "ERROR"

	def __init__(self):
		"""
		Initialize a class for debugging and error tracking.
		"""
		self.initialize(None)

	def initialize(self, root_directory: str):
		"""
		[Re]initialize.
		"""
		self.__initialized, self.__root_directory = (True, root_directory) if root_directory is not None else (False, "")
		self.__debug_file = self.__init_safe_file(self.__DEBUG_FILENAME)
		self.__filter_file = self.__init_safe_file(self.__FILTER_FILENAME)
		self.__error_file = self.__init_safe_file(self.__ERROR_FILENAME)

	def __init_safe_file(self, filename: str):
		"""
		Initialize a thread-safe file in the logs directory.
		"""
		return file.SafeFile(os.path.join(self.__root_directory, config.Directory.LOGS.value, filename))

	def log_debug(self, title: str, body: typing.Any):
		"""
		Log to the debug file.\n
		Intended for CLI output generated by other tools.
		"""
		self.__log(self.__DEBUG_KEY, title, body, self.__debug_file)

	def log_filter(self, title: str, body: typing.Any):
		"""
		Log to the filter file.\n
		Intended for output generated by this tool.
		"""
		self.__log(self.__FILTER_KEY, title, body, self.__filter_file)

	def log_error(self, title: str, body: typing.Any):
		"""
		Log to the error file.\n
		Intended for output generated by this tool.
		"""
		self.__log(self.__ERROR_KEY, title, body, self.__error_file)

	def __log(self, key: str, title: str, body: typing.Any, out: file.SafeFile):
		"""
		Log to a file.
		"""
		if self.__initialized:
			file.append(f"[ {general.get_timestamp()} ] {key}: {title}\n{str(body)}", out)

debug = Debug()
"""
Singleton class instance for debugging and error tracking.
"""
